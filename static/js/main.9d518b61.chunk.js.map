{"version":3,"sources":["AppState.js","global/styleConstants.js","components/Header.js","components/Section.js","components/charts/HorizontalBar.js","components/sectionWrappers/SummarySectionWrapper.js","components/sections/LineChartSection.js","components/sections/PieChartSection.js","components/sections/BarChartSection.js","utils/mapDataSetLabels.js","utils/getLowerRangeSeriesKeys.js","components/sections/ChartSection.js","utils/getLabelMapForCombinedChart.js","components/MainView.js","App.js","index.js"],"names":["AppState","observable","action","chartData","_this","_this2","setChartData","mockChartData","chartColors","HeaderStyled","styled","header","_templateObject","Header","_ref","title","react_default","a","createElement","className","SectionStyled","section","Section_templateObject","Section","children","StyledHorizontalBar","div","HorizontalBar_templateObject","HorizontalBar","percent","style","width","concat","left","StyledSummarySectionWrapper","SummarySectionWrapper_templateObject","SummarySectionWrapper","data","Section_Section","format","Date","revenueThisMonth","revenueLastMonth","revenueAverage","HorizontalBar_HorizontalBar","revenueRate","LineChartSection","LineChart","height","margin","top","right","bottom","XAxis","dataKey","Object","keys","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","slice","map","key","i","Line","type","stroke","length","PieChartSection","sum","reduce","acc","_ref2","value","percentData","_ref3","name","label","Math","round","PieChart","Pie","cx","cy","innerRadius","outerRadius","onAnimationEnd","labels","document","querySelectorAll","textContent","reformatLabels","_ref4","Cell","fill","align","layout","wrapperStyle","BarChartSection","labelMap","processedData","item","objectSpread","defineProperty","mapDataSetLabels","lowerRangeSeriesKeys","sortedSeries","values","filter","e","avgValue","sort","b","halfOfSortedSeriesLength","floor","lowerRangeSeries","middleItem","abs","push","getLowerRangeSeriesKeys","ComposedChart","yAxisId","orientation","match","Bar","barSize","indexOf","ChartSection","source","dataTransform","dataType","PieChartSection_PieChartSection","LineChartSection_LineChartSection","BarChartSection_BarChartSection","split","getLabelMapForCombinedChart","Error","MainViewStyled","main","MainView_templateObject","MainView","_Component","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","initialized","inherits","createClass","loadMockChartData","setState","SummarySectionWrapper_SummarySectionWrapper","summaryChart","ChartSection_ChartSection","monthlySales","mostPopular","paymentMethods","devices","revenueMonthToMonth","x","y","This month","y2","Last month","Component","inject","appState","observer","App","index_module","Header_Header","components_MainView","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.9d518b61.chunk.js","sourcesContent":["import { observable, action } from 'mobx';\nimport mockChartData from './fixtures/mockChartData.json';\n\nclass AppState {\n  @observable chartData;\n\n  @action setChartData = chartData => {\n    this.chartData = chartData;\n  };\n\n  @action loadMockChartData = () => {\n    this.setChartData(mockChartData);\n  };\n}\n\nexport { AppState };\n","export const borderColor = '#d4dae8';\nexport const textColor = '#6b7783';\nexport const sectionMargin = 16;\nexport const chartBackground = '#eef7f4';\nexport const chartColors = [\n    '#5db990',\n    '#558ca0',\n    '#864ba5',\n    '#829ac0',\n    '#a7e17a',\n];","import React from 'react';\nimport styled from '@emotion/styled';\nimport { borderColor } from '../global/styleConstants';\n\nconst HeaderStyled = styled.header`\n  width: 100%;\n\n  padding: 24px 36px;\n\n  background: white;\n  border: 1px solid ${borderColor};\n\n  .title {\n    font-weight: normal;\n    font-size: 24px;\n  }\n`;\n\nexport const Header = ({ title }) => (\n  <HeaderStyled>\n    <h1 className=\"title\">{title}</h1>\n  </HeaderStyled>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { borderColor, sectionMargin } from '../global/styleConstants';\n\nconst SectionStyled = styled.section`\n  margin: ${sectionMargin}px;\n  padding: 32px;\n\n  background: white;\n  border: 1px solid ${borderColor};\n  border-radius: 5px;\n\n  font-size: 14px;\n\n  .title {\n    font-size: 16px;\n    text-transform: uppercase;\n  }\n\n\n.section-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n`;\n\nexport const Section = ({ className, title, children }) => (\n  <SectionStyled className={className}>\n    <h2 className=\"title\">{title}</h2>\n    <div className=\"section-content\">{children}</div>\n  </SectionStyled>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {\n  chartBackground,\n  chartColors,\n  textColor,\n} from '../../global/styleConstants';\n\nconst StyledHorizontalBar = styled.div`\n  position: relative;\n\n  width: 100%;\n  height: 32px;\n\n  margin: 8px;\n\n  background: ${chartBackground};\n\n  .bar {\n    height: 100%;\n    background: ${chartColors[0]};\n  }\n\n  .label {\n    position: absolute;\n    top: 50%;\n    font-size: 12px;\n    color: white;\n    transform: translate(calc(-100% - 12px), -50%);\n  }\n\n  .label--outside {\n    color: ${textColor};\n    transform: translate(8px, -50%);\n  }\n`;\n\nexport const HorizontalBar = ({ percent }) => (\n  <StyledHorizontalBar>\n    <div className=\"bar\" style={{ width: `${percent}%` }} />\n    <div\n      className={`label ${percent < 5 && 'label--outside'}`}\n      style={{ left: `${percent}%` }}\n    >\n      {percent}%\n    </div>\n  </StyledHorizontalBar>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { format } from 'date-fns';\nimport { Section } from '../Section';\nimport { HorizontalBar } from '../charts/HorizontalBar';\n\nconst StyledSummarySectionWrapper = styled.div`\n  min-width: 400px;\n  .summary {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n`;\n\nexport const SummarySectionWrapper = ({ className, data }) => (\n  <StyledSummarySectionWrapper className={className}>\n    <Section title=\"Summary\" className=\"summary\">\n      <div className=\"current-month-summary\">\n        <div className=\"current-month-summary__label\">\n          In {format(new Date(), 'MMMM')} you did\n        </div>\n        <div className=\"current-month-summary__sum\">\n          ${data.revenueThisMonth}\n        </div>\n        <div className=\"comparison\">\n          <div className=\"comparison__label\">Last month you did:</div>\n          <div className=\"comparison__sum\">${data.revenueLastMonth}</div>\n        </div>\n        <div className=\"comparison\">\n          <div className=\"comparison__label\">Average monthly revenue:</div>\n          <div className=\"comparison__sum\">${data.revenueAverage}</div>\n        </div>\n        <HorizontalBar percent={data.revenueRate * 100} />\n        <div className=\"percent-of-average-label\">\n          of your monthly average revenue\n        </div>\n      </div>\n    </Section>\n  </StyledSummarySectionWrapper>\n);\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { chartColors } from '../../global/styleConstants';\nimport { Section } from '../Section';\n\nexport const LineChartSection = ({ className, data, title }) => {\n  return (\n    <Section title={title} className={className}>\n      <LineChart\n        width={600}\n        height={300}\n        data={data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <XAxis dataKey={Object.keys(data[0])[0]} />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Legend />\n        {Object.keys(data[0])\n          .slice(1)\n          .map((key, i) => (\n            <Line\n              key={key}\n              type=\"monotone\"\n              dataKey={key}\n              stroke={chartColors[i % chartColors.length]}\n            />\n          ))}\n      </LineChart>\n    </Section>\n  );\n};\n","import React from 'react';\nimport { PieChart, Pie, Cell, Legend, Tooltip } from 'recharts';\nimport { chartColors } from '../../global/styleConstants';\nimport { Section } from '../Section';\n\nconst reformatLabels = className => () => {\n  const labels = document.querySelectorAll(\n    `.${className} .recharts-pie-label-text tspan`\n  );\n  for (let i = 0; i < labels.length; i++) {\n    labels[i].textContent = `${labels[i].textContent}%`;\n  }\n};\n\nexport const PieChartSection = ({ className, data, title }) => {\n  const sum = data.reduce((acc, { value }) => acc + value, 0);\n  const percentData = data.map(({ value, label }) => ({\n    name: label,\n    value: Math.round((value * 100) / sum),\n  }));\n  return (\n    <Section title={title} className={className}>\n      <PieChart width={350} height={250}>\n        <Pie\n          data={percentData}\n          cx={120}\n          cy={120}\n          innerRadius={40}\n          outerRadius={80}\n          dataKey=\"value\"\n          label\n          onAnimationEnd={reformatLabels(className)}\n        >\n          {percentData.map(({ value }, i) => (\n            <Cell key={value} fill={chartColors[i % chartColors.length]} />\n          ))}\n        </Pie>\n        <Tooltip />\n        <Legend\n          width={200}\n          align=\"right\"\n          layout=\"vertical\"\n          wrapperStyle={{ top: 80, left: 260 }}\n        />\n      </PieChart>\n    </Section>\n  );\n};\n","import React from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { chartColors } from '../../global/styleConstants';\nimport { Section } from '../Section';\nimport { mapDataSetLabels } from '../../utils/mapDataSetLabels';\nimport { getLowerRangeSeriesKeys } from '../../utils/getLowerRangeSeriesKeys';\n\nexport const BarChartSection = ({ className, data, title, labelMap }) => {\n  const processedData = mapDataSetLabels(labelMap, data);\n  const lowerRangeSeriesKeys = getLowerRangeSeriesKeys(labelMap, processedData);\n  return (\n    <Section title={title} className={className}>\n      <ComposedChart\n        width={600}\n        height={400}\n        data={processedData}\n        margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n      >\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <XAxis dataKey={Object.keys(data[0])[0]} />\n        <YAxis yAxisId=\"lower\" />\n        <YAxis yAxisId=\"upper\" orientation=\"right\" />\n        <Tooltip />\n        <Legend />\n        {Object.keys(data[0])\n          .filter(key => key.match(/bar/))\n          .map((key, i) => (\n            <Bar\n              key={labelMap[key]}\n              dataKey={labelMap[key]}\n              barSize={20}\n              fill={chartColors[i % chartColors.length]}\n              yAxisId={\n                lowerRangeSeriesKeys.indexOf(labelMap[key]) > -1\n                  ? 'lower'\n                  : 'upper'\n              }\n            />\n          ))}\n        {Object.keys(data[0])\n          .filter(key => key.match(/line/))\n          .map((key, i) => (\n            <Line\n              key={labelMap[key]}\n              type=\"monotone\"\n              dataKey={labelMap[key]}\n              stroke={chartColors[i % chartColors.length]}\n              yAxisId={\n                lowerRangeSeriesKeys.indexOf(labelMap[key]) > -1\n                  ? 'lower'\n                  : 'upper'\n              }\n            />\n          ))}\n      </ComposedChart>\n    </Section>\n  );\n};\n","export const mapDataSetLabels = (labelMap, data) =>\n  data.map(item =>\n    Object.keys(item).reduce(\n      (acc, key) => ({ ...acc, [labelMap[key]]: item[key] }),\n      {}\n    )\n  );\n","export const getLowerRangeSeriesKeys = (labelMap, processedData) => {\n  const sortedSeries = Object.values(labelMap)\n    .filter(e => e !== 'label')\n    .map(key => ({\n      key: key,\n      avgValue:\n        processedData.reduce((acc, item) => acc + item[key], 0) /\n        processedData.length,\n    }))\n    .sort((a, b) => a.avgValue - b.avgValue);\n  const halfOfSortedSeriesLength = Math.floor(sortedSeries.length / 2);\n  const lowerRangeSeries = sortedSeries.slice(0, halfOfSortedSeriesLength);\n  if (sortedSeries.length % 2 !== 0) {\n    let middleItem = sortedSeries[halfOfSortedSeriesLength];\n    if (\n      Math.abs(\n        middleItem.avgValue - sortedSeries[halfOfSortedSeriesLength - 1]\n      ) <\n      Math.abs(middleItem.avgValue - sortedSeries[halfOfSortedSeriesLength + 1])\n    ) {\n      lowerRangeSeries.push(middleItem);\n    }\n  }\n  return lowerRangeSeries.map(item => item.key);\n};\n","import React from 'react';\nimport { LineChartSection } from './LineChartSection';\nimport { PieChartSection } from './PieChartSection';\nimport { BarChartSection } from './BarChartSection';\nimport { getLabelMapForCombinedChart } from '../../utils/getLabelMapForCombinedChart';\n\nexport const ChartSection = ({ className, source, title, dataTransform }) => {\n  const { dataType, data } = source;\n  const processedData = data.map(dataTransform);\n\n  switch (dataType) {\n    case 'pie':\n      return (\n        <PieChartSection\n          className={className}\n          title={title}\n          data={processedData}\n        />\n      );\n    case 'line':\n    case 'line2':\n      return (\n        <LineChartSection\n          className={className}\n          title={title}\n          data={processedData}\n        />\n      );\n    case 'bar':\n      return (\n        <BarChartSection\n          className={className}\n          title={title}\n          data={processedData}\n          labelMap={getLabelMapForCombinedChart(source)}\n        />\n      );\n    default:\n      throw new Error(`Unsupported data type: ${dataType}`);\n  }\n};\n","export const getLabelMapForCombinedChart = source => ({\n  label: 'label',\n  ...Object.keys(source)\n    .filter(key => key.match(/-bar|-label/))\n    .reduce((acc, key) => ({ ...acc, [key.split('-')[0]]: source[key] }), {}),\n});\n","import React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport { inject, observer } from 'mobx-react';\nimport { Section } from './Section';\nimport { SummarySectionWrapper } from './sectionWrappers/SummarySectionWrapper';\nimport { ChartSection } from './sections/ChartSection';\n\nconst MainViewStyled = styled.main`\n  display: flex;\n  flex-direction: column;\n\n  .container {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .summary-section-wrapper {\n    flex: 1 3 200px;\n  }\n\n  .monthly-sales-section-wrapper {\n    flex: 3 1 600px;\n  }\n\n  .most-popular-offers-section-wrapper,\n  .payment-methods-section-wrapper,\n  .devices-section-wrapper {\n    flex: 1 1 200px;\n  }\n`;\n\nexport class MainView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { initialized: false };\n  }\n\n  componentDidMount() {\n    if (!this.state.initialized) {\n      this.props.loadMockChartData();\n      this.setState({ initialized: true });\n    }\n  }\n\n  render() {\n    const { chartData } = this.props;\n    return chartData ? (\n      <MainViewStyled>\n        <div className=\"container\">\n          <SummarySectionWrapper\n            className=\"summary-section-wrapper\"\n            data={chartData.summaryChart.data}\n          />\n          <ChartSection\n            title=\"Monthly Sales\"\n            className=\"monthly-sales-section-wrapper\"\n            source={chartData.monthlySales}\n            dataTransform={e => e}\n          />\n        </div>\n        <div className=\"container\">\n          <ChartSection\n            title=\"Most Popular Offers\"\n            className=\"most-popular-offers-section-wrapper\"\n            source={chartData.mostPopular}\n            dataTransform={e => e}\n          />\n          <ChartSection\n            title=\"Payment Methods\"\n            className=\"payment-methods-section-wrapper\"\n            source={chartData.paymentMethods}\n            dataTransform={e => e}\n          />\n          <ChartSection\n            title=\"Devices\"\n            className=\"devices-section-wrapper\"\n            source={chartData.devices}\n            dataTransform={e => e}\n          />\n        </div>\n        <ChartSection\n          title=\"Revenue This Month vs Revenue Previous Month\"\n          className=\"revenue-section-wrapper\"\n          source={chartData.revenueMonthToMonth}\n          dataTransform={({ x, y, y2 }) => ({\n            x,\n            'This month': y2,\n            'Last month': y,\n          })}\n        />\n        <Section title=\"Geography\" className=\"geography-section-wrapper\">\n          [Section Content]\n        </Section>\n      </MainViewStyled>\n    ) : null;\n  }\n}\n\nexport default inject(({ appState }) => ({\n  chartData: appState.chartData,\n  loadMockChartData: appState.loadMockChartData,\n}))(observer(MainView));\n","import React, { Component } from 'react';\nimport { Provider } from 'mobx-react';\nimport { AppState } from './AppState';\nimport { Header } from './components/Header';\nimport MainView from './components/MainView';\nimport './index.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.appState = new AppState();\n  }\n\n  render() {\n    return (\n      <Provider appState={this.appState}>\n        <div className=\"App\">\n          <Header title=\"Dashboard\" />\n          <MainView />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}